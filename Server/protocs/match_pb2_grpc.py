# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protocs.match_pb2 as match__pb2


class MatchSenderStub(object):
    """the service that will send single match
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getSingleMatch = channel.unary_unary(
                '/MatchSender/getSingleMatch',
                request_serializer=match__pb2.MatchRequest.SerializeToString,
                response_deserializer=match__pb2.Match.FromString,
                )
        self.getMatchInLastSeasons = channel.unary_unary(
                '/MatchSender/getMatchInLastSeasons',
                request_serializer=match__pb2.LeagueRequest.SerializeToString,
                response_deserializer=match__pb2.MatchList.FromString,
                )
        self.getUpcomingGames = channel.unary_unary(
                '/MatchSender/getUpcomingGames',
                request_serializer=match__pb2.LeagueRequest.SerializeToString,
                response_deserializer=match__pb2.MatchList.FromString,
                )
        self.setOddsforUpcominGames = channel.unary_unary(
                '/MatchSender/setOddsforUpcominGames',
                request_serializer=match__pb2.MatchList.SerializeToString,
                response_deserializer=match__pb2.MatchList.FromString,
                )
        self.predict = channel.unary_unary(
                '/MatchSender/predict',
                request_serializer=match__pb2.predictRequest.SerializeToString,
                response_deserializer=match__pb2.PredictionList.FromString,
                )
        self.dbfunctions = channel.unary_unary(
                '/MatchSender/dbfunctions',
                request_serializer=match__pb2.dbCommand.SerializeToString,
                response_deserializer=match__pb2.strMsg.FromString,
                )


class MatchSenderServicer(object):
    """the service that will send single match
    """

    def getSingleMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMatchInLastSeasons(self, request, context):
        """return list of matches associate to the requested league in the last 3 seasons
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUpcomingGames(self, request, context):
        """return list of the upcoming game per league
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setOddsforUpcominGames(self, request, context):
        """set the upcoming game's odds after manual insert
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict(self, request, context):
        """predicts all upcoming games 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dbfunctions(self, request, context):
        """in order to clean or rewrite the db
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchSenderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getSingleMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.getSingleMatch,
                    request_deserializer=match__pb2.MatchRequest.FromString,
                    response_serializer=match__pb2.Match.SerializeToString,
            ),
            'getMatchInLastSeasons': grpc.unary_unary_rpc_method_handler(
                    servicer.getMatchInLastSeasons,
                    request_deserializer=match__pb2.LeagueRequest.FromString,
                    response_serializer=match__pb2.MatchList.SerializeToString,
            ),
            'getUpcomingGames': grpc.unary_unary_rpc_method_handler(
                    servicer.getUpcomingGames,
                    request_deserializer=match__pb2.LeagueRequest.FromString,
                    response_serializer=match__pb2.MatchList.SerializeToString,
            ),
            'setOddsforUpcominGames': grpc.unary_unary_rpc_method_handler(
                    servicer.setOddsforUpcominGames,
                    request_deserializer=match__pb2.MatchList.FromString,
                    response_serializer=match__pb2.MatchList.SerializeToString,
            ),
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=match__pb2.predictRequest.FromString,
                    response_serializer=match__pb2.PredictionList.SerializeToString,
            ),
            'dbfunctions': grpc.unary_unary_rpc_method_handler(
                    servicer.dbfunctions,
                    request_deserializer=match__pb2.dbCommand.FromString,
                    response_serializer=match__pb2.strMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MatchSender', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MatchSender(object):
    """the service that will send single match
    """

    @staticmethod
    def getSingleMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MatchSender/getSingleMatch',
            match__pb2.MatchRequest.SerializeToString,
            match__pb2.Match.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMatchInLastSeasons(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MatchSender/getMatchInLastSeasons',
            match__pb2.LeagueRequest.SerializeToString,
            match__pb2.MatchList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUpcomingGames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MatchSender/getUpcomingGames',
            match__pb2.LeagueRequest.SerializeToString,
            match__pb2.MatchList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setOddsforUpcominGames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MatchSender/setOddsforUpcominGames',
            match__pb2.MatchList.SerializeToString,
            match__pb2.MatchList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MatchSender/predict',
            match__pb2.predictRequest.SerializeToString,
            match__pb2.PredictionList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dbfunctions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MatchSender/dbfunctions',
            match__pb2.dbCommand.SerializeToString,
            match__pb2.strMsg.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
