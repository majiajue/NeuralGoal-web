// source: src/match.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */


var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.match.Deposit', null, global);
goog.exportSymbol('proto.match.DoubleBet', null, global);
goog.exportSymbol('proto.match.DoubleBet.Result', null, global);
goog.exportSymbol('proto.match.Empty', null, global);
goog.exportSymbol('proto.match.League', null, global);
goog.exportSymbol('proto.match.Match', null, global);
goog.exportSymbol('proto.match.Match.Result', null, global);
goog.exportSymbol('proto.match.MatchData', null, global);
goog.exportSymbol('proto.match.MatchList', null, global);
goog.exportSymbol('proto.match.Prediction', null, global);
goog.exportSymbol('proto.match.PredictionList', null, global);
goog.exportSymbol('proto.match.SingleBet', null, global);
goog.exportSymbol('proto.match.SingleBet.Result', null, global);
goog.exportSymbol('proto.match.amount', null, global);
goog.exportSymbol('proto.match.strMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.Empty.displayName = 'proto.match.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.Deposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.Deposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.Deposit.displayName = 'proto.match.Deposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.amount.displayName = 'proto.match.amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.League = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.League, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.League.displayName = 'proto.match.League';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.strMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.strMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.strMsg.displayName = 'proto.match.strMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.Match.displayName = 'proto.match.Match';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.SingleBet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.SingleBet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.SingleBet.displayName = 'proto.match.SingleBet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.DoubleBet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.DoubleBet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.DoubleBet.displayName = 'proto.match.DoubleBet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.MatchData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.MatchData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.MatchData.displayName = 'proto.match.MatchData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.Prediction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.match.Prediction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.Prediction.displayName = 'proto.match.Prediction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.MatchList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.match.MatchList.repeatedFields_, null);
};
goog.inherits(proto.match.MatchList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.MatchList.displayName = 'proto.match.MatchList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.match.PredictionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.match.PredictionList.repeatedFields_, null);
};
goog.inherits(proto.match.PredictionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.match.PredictionList.displayName = 'proto.match.PredictionList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.match.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.Empty}
 */
proto.match.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.Empty;
  return proto.match.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.Empty}
 */
proto.match.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.Deposit.prototype.toObject = function(opt_includeInstance) {
  return proto.match.Deposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.Deposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Deposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.Deposit}
 */
proto.match.Deposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.Deposit;
  return proto.match.Deposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.Deposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.Deposit}
 */
proto.match.Deposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.Deposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.Deposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.Deposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Deposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.match.Deposit.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Deposit} returns this
 */
proto.match.Deposit.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double amount = 2;
 * @return {number}
 */
proto.match.Deposit.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Deposit} returns this
 */
proto.match.Deposit.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.amount.prototype.toObject = function(opt_includeInstance) {
  return proto.match.amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.amount}
 */
proto.match.amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.amount;
  return proto.match.amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.amount}
 */
proto.match.amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double amount = 1;
 * @return {number}
 */
proto.match.amount.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.amount} returns this
 */
proto.match.amount.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.League.prototype.toObject = function(opt_includeInstance) {
  return proto.match.League.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.League} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.League.toObject = function(includeInstance, msg) {
  var f, obj = {
    league: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.League}
 */
proto.match.League.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.League;
  return proto.match.League.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.League} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.League}
 */
proto.match.League.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeague(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.League.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.League.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.League} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.League.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeague();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string league = 1;
 * @return {string}
 */
proto.match.League.prototype.getLeague = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.League} returns this
 */
proto.match.League.prototype.setLeague = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.strMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.match.strMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.strMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.strMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.strMsg}
 */
proto.match.strMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.strMsg;
  return proto.match.strMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.strMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.strMsg}
 */
proto.match.strMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.strMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.strMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.strMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.strMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string msg = 1;
 * @return {string}
 */
proto.match.strMsg.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.strMsg} returns this
 */
proto.match.strMsg.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.match.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Match.toObject = function(includeInstance, msg) {
  var f, obj = {
    league: jspb.Message.getFieldWithDefault(msg, 1, ""),
    date: jspb.Message.getFieldWithDefault(msg, 2, ""),
    homeTeam: jspb.Message.getFieldWithDefault(msg, 3, ""),
    awayTeam: jspb.Message.getFieldWithDefault(msg, 4, ""),
    result: jspb.Message.getFieldWithDefault(msg, 5, 0),
    matchid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.Match}
 */
proto.match.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.Match;
  return proto.match.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.Match}
 */
proto.match.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeague(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeTeam(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAwayTeam(value);
      break;
    case 5:
      var value = /** @type {!proto.match.Match.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeague();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHomeTeam();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAwayTeam();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.match.Match.Result = {
  NULL: 0,
  HOME: 1,
  AWAY: 2,
  DRAW: 3
};

/**
 * optional string league = 1;
 * @return {string}
 */
proto.match.Match.prototype.getLeague = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Match} returns this
 */
proto.match.Match.prototype.setLeague = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date = 2;
 * @return {string}
 */
proto.match.Match.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Match} returns this
 */
proto.match.Match.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string home_team = 3;
 * @return {string}
 */
proto.match.Match.prototype.getHomeTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Match} returns this
 */
proto.match.Match.prototype.setHomeTeam = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string away_team = 4;
 * @return {string}
 */
proto.match.Match.prototype.getAwayTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Match} returns this
 */
proto.match.Match.prototype.setAwayTeam = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Result result = 5;
 * @return {!proto.match.Match.Result}
 */
proto.match.Match.prototype.getResult = function() {
  return /** @type {!proto.match.Match.Result} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.match.Match.Result} value
 * @return {!proto.match.Match} returns this
 */
proto.match.Match.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string matchID = 6;
 * @return {string}
 */
proto.match.Match.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Match} returns this
 */
proto.match.Match.prototype.setMatchid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.SingleBet.prototype.toObject = function(opt_includeInstance) {
  return proto.match.SingleBet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.SingleBet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.SingleBet.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiptid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    betValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    betOdd: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    matchid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    result: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.SingleBet}
 */
proto.match.SingleBet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.SingleBet;
  return proto.match.SingleBet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.SingleBet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.SingleBet}
 */
proto.match.SingleBet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiptid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBetValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBetOdd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 5:
      var value = /** @type {!proto.match.SingleBet.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.SingleBet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.SingleBet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.SingleBet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.SingleBet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiptid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBetValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getBetOdd();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.match.SingleBet.Result = {
  NULL: 0,
  HOME: 1,
  AWAY: 2,
  DRAW: 3
};

/**
 * optional string receiptID = 1;
 * @return {string}
 */
proto.match.SingleBet.prototype.getReceiptid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.SingleBet} returns this
 */
proto.match.SingleBet.prototype.setReceiptid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double bet_value = 2;
 * @return {number}
 */
proto.match.SingleBet.prototype.getBetValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.SingleBet} returns this
 */
proto.match.SingleBet.prototype.setBetValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double bet_odd = 3;
 * @return {number}
 */
proto.match.SingleBet.prototype.getBetOdd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.SingleBet} returns this
 */
proto.match.SingleBet.prototype.setBetOdd = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string matchID = 4;
 * @return {string}
 */
proto.match.SingleBet.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.SingleBet} returns this
 */
proto.match.SingleBet.prototype.setMatchid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Result result = 5;
 * @return {!proto.match.SingleBet.Result}
 */
proto.match.SingleBet.prototype.getResult = function() {
  return /** @type {!proto.match.SingleBet.Result} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.match.SingleBet.Result} value
 * @return {!proto.match.SingleBet} returns this
 */
proto.match.SingleBet.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.DoubleBet.prototype.toObject = function(opt_includeInstance) {
  return proto.match.DoubleBet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.DoubleBet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.DoubleBet.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiptid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    betValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    betOdd: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    match1Id: jspb.Message.getFieldWithDefault(msg, 4, ""),
    result1: jspb.Message.getFieldWithDefault(msg, 5, 0),
    match2Id: jspb.Message.getFieldWithDefault(msg, 6, ""),
    result2: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.DoubleBet}
 */
proto.match.DoubleBet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.DoubleBet;
  return proto.match.DoubleBet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.DoubleBet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.DoubleBet}
 */
proto.match.DoubleBet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiptid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBetValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBetOdd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatch1Id(value);
      break;
    case 5:
      var value = /** @type {!proto.match.DoubleBet.Result} */ (reader.readEnum());
      msg.setResult1(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatch2Id(value);
      break;
    case 7:
      var value = /** @type {!proto.match.DoubleBet.Result} */ (reader.readEnum());
      msg.setResult2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.DoubleBet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.DoubleBet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.DoubleBet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.DoubleBet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiptid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBetValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getBetOdd();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMatch1Id();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getResult1();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMatch2Id();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getResult2();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.match.DoubleBet.Result = {
  NULL: 0,
  HOME: 1,
  AWAY: 2,
  DRAW: 3
};

/**
 * optional string receiptID = 1;
 * @return {string}
 */
proto.match.DoubleBet.prototype.getReceiptid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.DoubleBet} returns this
 */
proto.match.DoubleBet.prototype.setReceiptid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double bet_value = 2;
 * @return {number}
 */
proto.match.DoubleBet.prototype.getBetValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.DoubleBet} returns this
 */
proto.match.DoubleBet.prototype.setBetValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double bet_odd = 3;
 * @return {number}
 */
proto.match.DoubleBet.prototype.getBetOdd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.DoubleBet} returns this
 */
proto.match.DoubleBet.prototype.setBetOdd = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string match1_ID = 4;
 * @return {string}
 */
proto.match.DoubleBet.prototype.getMatch1Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.DoubleBet} returns this
 */
proto.match.DoubleBet.prototype.setMatch1Id = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Result result_1 = 5;
 * @return {!proto.match.DoubleBet.Result}
 */
proto.match.DoubleBet.prototype.getResult1 = function() {
  return /** @type {!proto.match.DoubleBet.Result} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.match.DoubleBet.Result} value
 * @return {!proto.match.DoubleBet} returns this
 */
proto.match.DoubleBet.prototype.setResult1 = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string match2_ID = 6;
 * @return {string}
 */
proto.match.DoubleBet.prototype.getMatch2Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.DoubleBet} returns this
 */
proto.match.DoubleBet.prototype.setMatch2Id = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Result result_2 = 7;
 * @return {!proto.match.DoubleBet.Result}
 */
proto.match.DoubleBet.prototype.getResult2 = function() {
  return /** @type {!proto.match.DoubleBet.Result} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.match.DoubleBet.Result} value
 * @return {!proto.match.DoubleBet} returns this
 */
proto.match.DoubleBet.prototype.setResult2 = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.MatchData.prototype.toObject = function(opt_includeInstance) {
  return proto.match.MatchData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.MatchData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.MatchData.toObject = function(includeInstance, msg) {
  var f, obj = {
    league: jspb.Message.getFieldWithDefault(msg, 1, ""),
    date: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    homeTeamName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    awayTeamName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    homeTeamRank: jspb.Message.getFieldWithDefault(msg, 6, 0),
    awayTeamRank: jspb.Message.getFieldWithDefault(msg, 7, 0),
    homeTeamScored: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    awayTeamScored: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    homeTeamReceived: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    awayTeamReceived: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    homeAtt: jspb.Message.getFieldWithDefault(msg, 12, 0),
    awayAtt: jspb.Message.getFieldWithDefault(msg, 13, 0),
    homeDef: jspb.Message.getFieldWithDefault(msg, 14, 0),
    awayDef: jspb.Message.getFieldWithDefault(msg, 15, 0),
    homeMid: jspb.Message.getFieldWithDefault(msg, 16, 0),
    awayMid: jspb.Message.getFieldWithDefault(msg, 17, 0),
    homeOddsN: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    drawOddsN: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    awayOddsN: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    result: jspb.Message.getFieldWithDefault(msg, 21, ""),
    homeOddsNn: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    drawOddsNn: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0),
    awayOddsNn: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.MatchData}
 */
proto.match.MatchData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.MatchData;
  return proto.match.MatchData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.MatchData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.MatchData}
 */
proto.match.MatchData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeague(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeTeamName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAwayTeamName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHomeTeamRank(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAwayTeamRank(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHomeTeamScored(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAwayTeamScored(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHomeTeamReceived(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAwayTeamReceived(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHomeAtt(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAwayAtt(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHomeDef(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAwayDef(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHomeMid(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAwayMid(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHomeOddsN(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDrawOddsN(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAwayOddsN(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHomeOddsNn(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDrawOddsNn(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAwayOddsNn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.MatchData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.MatchData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.MatchData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.MatchData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeague();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHomeTeamName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAwayTeamName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHomeTeamRank();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAwayTeamRank();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getHomeTeamScored();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getAwayTeamScored();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getHomeTeamReceived();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getAwayTeamReceived();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getHomeAtt();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getAwayAtt();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getHomeDef();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getAwayDef();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getHomeMid();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getAwayMid();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getHomeOddsN();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getDrawOddsN();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getAwayOddsN();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getHomeOddsNn();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getDrawOddsNn();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = message.getAwayOddsNn();
  if (f !== 0.0) {
    writer.writeDouble(
      24,
      f
    );
  }
};


/**
 * optional string league = 1;
 * @return {string}
 */
proto.match.MatchData.prototype.getLeague = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setLeague = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date = 2;
 * @return {string}
 */
proto.match.MatchData.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.match.MatchData.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string home_team_name = 4;
 * @return {string}
 */
proto.match.MatchData.prototype.getHomeTeamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeTeamName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string away_team_name = 5;
 * @return {string}
 */
proto.match.MatchData.prototype.getAwayTeamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayTeamName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 home_team_rank = 6;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeTeamRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeTeamRank = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 away_team_rank = 7;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayTeamRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayTeamRank = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double home_team_scored = 8;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeTeamScored = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeTeamScored = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double away_team_scored = 9;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayTeamScored = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayTeamScored = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double home_team_received = 10;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeTeamReceived = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeTeamReceived = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double away_team_received = 11;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayTeamReceived = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayTeamReceived = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional int32 home_att = 12;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeAtt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeAtt = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 away_att = 13;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayAtt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayAtt = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 home_def = 14;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeDef = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeDef = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 away_def = 15;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayDef = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayDef = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 home_mid = 16;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeMid = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 away_mid = 17;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayMid = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional double home_odds_n = 18;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeOddsN = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeOddsN = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double draw_odds_n = 19;
 * @return {number}
 */
proto.match.MatchData.prototype.getDrawOddsN = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setDrawOddsN = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double away_odds_n = 20;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayOddsN = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayOddsN = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional string result = 21;
 * @return {string}
 */
proto.match.MatchData.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional double home_odds_nn = 22;
 * @return {number}
 */
proto.match.MatchData.prototype.getHomeOddsNn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setHomeOddsNn = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double draw_odds_nn = 23;
 * @return {number}
 */
proto.match.MatchData.prototype.getDrawOddsNn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setDrawOddsNn = function(value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional double away_odds_nn = 24;
 * @return {number}
 */
proto.match.MatchData.prototype.getAwayOddsNn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.MatchData} returns this
 */
proto.match.MatchData.prototype.setAwayOddsNn = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.Prediction.prototype.toObject = function(opt_includeInstance) {
  return proto.match.Prediction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.Prediction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Prediction.toObject = function(includeInstance, msg) {
  var f, obj = {
    league: jspb.Message.getFieldWithDefault(msg, 1, ""),
    date: jspb.Message.getFieldWithDefault(msg, 2, ""),
    homeTeamName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    awayTeamName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    homeOddsNn: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    drawOddsNn: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    awayOddsNn: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    pred1: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    pred2: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    predX: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    expected: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    result: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.Prediction}
 */
proto.match.Prediction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.Prediction;
  return proto.match.Prediction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.Prediction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.Prediction}
 */
proto.match.Prediction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeague(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeTeamName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAwayTeamName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHomeOddsNn(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDrawOddsNn(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAwayOddsNn(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPred1(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPred2(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPredX(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExpected(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.Prediction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.Prediction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.Prediction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.Prediction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeague();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHomeTeamName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAwayTeamName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHomeOddsNn();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getDrawOddsNn();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getAwayOddsNn();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getPred1();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getPred2();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPredX();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getExpected();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string league = 1;
 * @return {string}
 */
proto.match.Prediction.prototype.getLeague = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setLeague = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date = 2;
 * @return {string}
 */
proto.match.Prediction.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string home_team_name = 3;
 * @return {string}
 */
proto.match.Prediction.prototype.getHomeTeamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setHomeTeamName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string away_team_name = 4;
 * @return {string}
 */
proto.match.Prediction.prototype.getAwayTeamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setAwayTeamName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double home_odds_nn = 5;
 * @return {number}
 */
proto.match.Prediction.prototype.getHomeOddsNn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setHomeOddsNn = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double draw_odds_nn = 6;
 * @return {number}
 */
proto.match.Prediction.prototype.getDrawOddsNn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setDrawOddsNn = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double away_odds_nn = 7;
 * @return {number}
 */
proto.match.Prediction.prototype.getAwayOddsNn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setAwayOddsNn = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double pred_1 = 8;
 * @return {number}
 */
proto.match.Prediction.prototype.getPred1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setPred1 = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double pred_2 = 9;
 * @return {number}
 */
proto.match.Prediction.prototype.getPred2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setPred2 = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double pred_x = 10;
 * @return {number}
 */
proto.match.Prediction.prototype.getPredX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setPredX = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double expected = 11;
 * @return {number}
 */
proto.match.Prediction.prototype.getExpected = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setExpected = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional string result = 12;
 * @return {string}
 */
proto.match.Prediction.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.match.Prediction} returns this
 */
proto.match.Prediction.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.match.MatchList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.MatchList.prototype.toObject = function(opt_includeInstance) {
  return proto.match.MatchList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.MatchList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.MatchList.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.match.MatchData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.MatchList}
 */
proto.match.MatchList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.MatchList;
  return proto.match.MatchList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.MatchList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.MatchList}
 */
proto.match.MatchList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.match.MatchData;
      reader.readMessage(value,proto.match.MatchData.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.MatchList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.MatchList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.MatchList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.MatchList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.match.MatchData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MatchData list = 1;
 * @return {!Array<!proto.match.MatchData>}
 */
proto.match.MatchList.prototype.getListList = function() {
  return /** @type{!Array<!proto.match.MatchData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.match.MatchData, 1));
};


/**
 * @param {!Array<!proto.match.MatchData>} value
 * @return {!proto.match.MatchList} returns this
*/
proto.match.MatchList.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.match.MatchData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.match.MatchData}
 */
proto.match.MatchList.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.match.MatchData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.match.MatchList} returns this
 */
proto.match.MatchList.prototype.clearListList = function() {
  return this.setListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.match.PredictionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.match.PredictionList.prototype.toObject = function(opt_includeInstance) {
  return proto.match.PredictionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.match.PredictionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.PredictionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.match.Prediction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.match.PredictionList}
 */
proto.match.PredictionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.match.PredictionList;
  return proto.match.PredictionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.match.PredictionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.match.PredictionList}
 */
proto.match.PredictionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.match.Prediction;
      reader.readMessage(value,proto.match.Prediction.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.match.PredictionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.match.PredictionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.match.PredictionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.match.PredictionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.match.Prediction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Prediction list = 1;
 * @return {!Array<!proto.match.Prediction>}
 */
proto.match.PredictionList.prototype.getListList = function() {
  return /** @type{!Array<!proto.match.Prediction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.match.Prediction, 1));
};


/**
 * @param {!Array<!proto.match.Prediction>} value
 * @return {!proto.match.PredictionList} returns this
*/
proto.match.PredictionList.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.match.Prediction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.match.Prediction}
 */
proto.match.PredictionList.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.match.Prediction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.match.PredictionList} returns this
 */
proto.match.PredictionList.prototype.clearListList = function() {
  return this.setListList([]);
};


goog.object.extend(exports, proto.match);
